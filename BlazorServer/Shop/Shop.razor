@inject IJSRuntime js
@inject ShopService shopService

<div class="container">
    <div class="row">
        <section class="col-3">
            <h5 class="text-warning ml-3">Sort</h5>
            <select class="custom-select my-3"
                    @onchange="SelectSortMethod">
                <option value="name">
                    Alphabetical
                </option>
                <option value="priceAsc">
                    Price: Low to High
                </option>
                <option value="priceDesc">
                    Price: High to Low
                </option>
            </select>
            <h5 class="text-warning ml-3">Brands</h5>
            <ul class="list-group my-3">

                @if (productBrands != null)
                {
                    <li class="list-group-item
                    @(productBrandIdSelected == 0 ? "active" : "")"
                        @onclick="() => SelectBrand(0)">All</li>

                    @foreach (var brand in productBrands)
                    {
                        <li class="list-group-item
                            @(productBrandIdSelected == brand.Id ? "active" : "")"
                            @onclick="() => SelectBrand(brand.Id)">@brand.Name</li>
                        }
                }
            </ul>
            <h5 class="text-warning ml-3">Types</h5>
            <ul class="list-group my-3">

                @if (productTypes != null)
                {
                    <li class="list-group-item
                        @(productTypeIdSelected == 0 ? "active" : "")"
                        @onclick="() => SelectType(0)">All</li>

                    @foreach (var type in productTypes)
                    {
                        <li class="list-group-item
                            @(productTypeIdSelected == type.Id ? "active" : "")"
                            @onclick="() => SelectType(type.Id)">@type.Name</li>
                        }
                }
            </ul>
        </section>
        <section class="col-9">
            <div class="d-flex justify-content-between align-items-center pb-2">
                <header>
                    <span>Showing <strong>10</strong> of <strong>15</strong> Results</span>
                </header>
                <div class="form-inline mt-2">
                    <input type="text"
                           class="form-control mr-2"
                           style="width: 300px;"
                           placeholder="Search..." />
                    <button class="btn btn-outline-primary my-2">Search</button>
                    <button class="btn btn-outline-success my-2 ml-2">Reset</button>
                </div>
            </div>
            <div class="row">
                @if (products != null)
                {
                    @foreach (var product in products)
                    {
                        <div class="col-4 mb-4">
                            <ProductItem Product="product" />
                        </div>
                    }
                }
            </div>
            <div class="d-flex justify-content-center">
                <nav aria-label="...">
                    <ul class="pagination">
                        <li class="page-item disabled">
                            <a class="page-link">Previous</a>
                        </li>

                        @if (pagination != null)
                            @foreach (var page in pages)
                            {
                                <li class="page-item">
                                    <button class="page-link"
                                            @onclick="() => ChangePage(page + 1)">
                                        @(page + 1)
                                    </button>
                                </li>
                            }

                        <li class="page-item">
                            <a class="page-link">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </section>
    </div>
</div>

@code {
    List<int> pages;
    Pagination pagination;
    List<Product> products;
    List<ProductBrand> productBrands;
    List<ProductType> productTypes;
    int productBrandIdSelected = 0;
    int productTypeIdSelected = 0;
    string sortSelected = "name";
    int pageIndex = 1;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
        await GetProductBrands();
        await GetProductTypes();

        SetPages();
    }

    void SetPages()
    {
        pages = new List<int>();

        for (int i = 0;
            i < Math.Ceiling((double)pagination.Count / (double)pagination.PageSize);
            i++)
        {
            pages.Add(i);
        }
    }

    async Task GetProducts()
    {
        var response = await shopService.GetProducts(productBrandIdSelected,
                                                       productTypeIdSelected,
                                                       sortSelected,
                                                       pageIndex);
        pagination = response;
        products = response.Data;

        pageIndex = 1;
        SetPages();
    }

    async Task GetProductBrands()
    {
        productBrands = await shopService.GetProductBrands();
    }

    async Task GetProductTypes()
    {
        productTypes = await shopService.GetProductTypes();
    }

    async Task SelectBrand(int id)
    {
        productBrandIdSelected = id;
        await GetProducts();
    }

    async Task SelectType(int id)
    {
        productTypeIdSelected = id;
        await GetProducts();
    }

    async Task SelectSortMethod(ChangeEventArgs args)
    {
        sortSelected = args.Value.ToString();
        await GetProducts();
    }

    async Task ChangePage(int page)
    {
        pageIndex = page;
        await GetProducts();
    }
}